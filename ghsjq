using NUnit.Framework;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Linq.Expressions;

namespace YourApp.Tests.Repositories
{
    public class GenericRepositoryTests
    {
        private TestDbContext _context;
        private GenericRepository _repository;

        [SetUp]
        public void Setup()
        {
            var options = new DbContextOptionsBuilder<TestDbContext>()
                .UseInMemoryDatabase(Guid.NewGuid().ToString())
                .Options;

            _context = new TestDbContext(options);
            _context.SeedTestData();
            _repository = new GenericRepository(_context);
        }

        [Test]
        public void FindQueryableBy_WithPredicate_FiltersResults()
        {
            // Arrange
            Expression<Func<User, bool>> predicate = u => u.Age > 25;

            // Act
            var query = _repository.FindQueryableBy(predicate);
            var result = query.ToList();

            // Assert
            Assert.That(result, Has.All.Matches<User>(u => u.Age > 25));
        }

        [Test]
        public void FindQueryableBy_WithOrderBy_OrdersCorrectly()
        {
            // Arrange
            Func<IQueryable<User>, IOrderedQueryable<User>> orderBy = q => q.OrderBy(u => u.Name);

            // Act
            var result = _repository.FindQueryableBy(orderBy: orderBy).ToList();

            // Assert
            var expected = result.OrderBy(u => u.Name).ToList();
            Assert.That(result, Is.EqualTo(expected));
        }

        [Test]
        public void FindQueryableBy_WithMultiplePredicates_FiltersAll()
        {
            // Arrange
            Expression<Func<User, bool>> p1 = u => u.Age > 20;
            Expression<Func<User, bool>> p2 = u => u.Name.Contains("a");

            // Act
            var result = _repository.FindQueryableBy(p1, p2).ToList();

            // Assert
            Assert.That(result, Has.All.Matches<User>(u => u.Age > 20 && u.Name.Contains("a")));
        }
    }

    // === Test context and entities ===

    public class TestDbContext : DbContext
    {
        public TestDbContext(DbContextOptions<TestDbContext> options) : base(options) { }

        public DbSet<User> Users { get; set; }

        public void SeedTestData()
        {
            Users.AddRange(new[]
            {
                new User { Id = 1, Name = "Sam", Age = 30 },
                new User { Id = 2, Name = "Alice", Age = 20 },
                new User { Id = 3, Name = "Bob", Age = 40 },
            });
            SaveChanges();
        }
    }

    public class User
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public int Age { get; set; }
    }

    public class GenericRepository
    {
        private readonly DbContext context;

        public GenericRepository(DbContext context)
        {
            this.context = context;
        }

        public IQueryable<TEntity> FindQueryableBy<TEntity>(
            Func<IQueryable<TEntity>, IQueryable<TEntity>> includes = null,
            Func<IQueryable<TEntity>, IOrderedQueryable<TEntity>> orderBy = null,
            CancellationToken cancellationToken = default,
            params Expression<Func<TEntity, bool>>[] predicates
        ) where TEntity : class
        {
            IQueryable<TEntity> query = context.Set<TEntity>();

            if (includes != null)
                query = includes(query);

            foreach (var predicate in predicates)
                query = query.Where(predicate);

            if (orderBy != null)
                query = orderBy(query);

            return query.AsSplitQuery();
        }
    }
}