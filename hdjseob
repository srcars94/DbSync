using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using NUnit.Framework;

namespace YourProject.Tests
{
    public class Parameter
    {
        public string Value { get; set; } = "";
        public int Utility { get; set; }
    }

    public class NoValue
    {
        public string SomethingElse { get; set; } = "";
    }

    [TestFixture]
    public class AsyncEnumerableExtensionsTests
    {
        // Helper to create a Task<IEnumerable<T>>
        private static Task<IEnumerable<T>> AsTask<T>(IEnumerable<T> items) => Task.FromResult(items);

        [Test]
        public async Task FirstValueAsync_ReturnsParsedDecimal_FromFirstItem()
        {
            var items = new[]
            {
                new Parameter { Value = "12.5" },
                new Parameter { Value = "99" }
            };

            decimal? result = await AsTask(items)
                .FirstValueAsync(decimal.Parse);

            Assert.That(result, Is.EqualTo(12.5m));
        }

        [Test]
        public async Task FirstValueAsync_UsesPredicate_ToSelectMatchingItem()
        {
            var items = new[]
            {
                new Parameter { Value = "10", Utility = 0 },
                new Parameter { Value = "42", Utility = 2 },
                new Parameter { Value = "77", Utility = 3 },
            };

            decimal? result = await AsTask(items)
                .FirstValueAsync(
                    selector: decimal.Parse,
                    predicate: p => p.Utility == 2);

            Assert.That(result, Is.EqualTo(42m));
        }

        [Test]
        public async Task FirstValueAsync_ReturnsNull_WhenSequenceEmpty()
        {
            var items = Array.Empty<Parameter>();

            decimal? result = await AsTask(items)
                .FirstValueAsync(decimal.Parse);

            Assert.That(result, Is.Null);
        }

        [Test]
        public async Task FirstValueAsync_ReturnsNull_WhenValueIsNullOrWhitespace()
        {
            var items = new[]
            {
                new Parameter { Value = " " },      // whitespace
                new Parameter { Value = null! },    // null
            };

            decimal? result = await AsTask(items)
                .FirstValueAsync(decimal.Parse);

            Assert.That(result, Is.Null);
        }

        [Test]
        public async Task FirstValueAsync_ReturnsNull_WhenTypeHasNoValueProperty()
        {
            var items = new[]
            {
                new NoValue { SomethingElse = "abc" }
            };

            int? result = await AsTask(items)
                .FirstValueAsync<int>(int.Parse);

            Assert.That(result, Is.Null);
        }

        [Test]
        public async Task FirstValueAsync_DoesNotCallSelector_WhenNoMatch()
        {
            var items = new[]
            {
                new Parameter { Value = "100", Utility = 1 },
                new Parameter { Value = "200", Utility = 1 }
            };

            var called = 0;

            decimal? result = await AsTask(items)
                .FirstValueAsync(
                    selector: s => { called++; return decimal.Parse(s); },
                    predicate: p => p.Utility == 999); // no match

            Assert.Multiple(() =>
            {
                Assert.That(result, Is.Null);
                Assert.That(called, Is.EqualTo(0), "Selector should not be called when there is no match");
            });
        }

        [Test]
        public async Task FirstValueAsync_UsesFirst_WhenPredicateNull()
        {
            var items = new[]
            {
                new Parameter { Value = "5" },
                new Parameter { Value = "6" }
            };

            int? result = await AsTask(items)
                .FirstValueAsync(int.Parse, predicate: null);

            Assert.That(result, Is.EqualTo(5));
        }
    }
}