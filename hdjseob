using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Mvc.ViewEngines;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using System.IO;
using System.Threading.Tasks;

public interface IViewRenderService
{
    Task<string> RenderToStringAsync(string viewName, object model = null, bool isMainPage = false);
}

public class ViewRenderService : IViewRenderService
{
    private readonly IRazorViewEngine _viewEngine;
    private readonly ITempDataProvider _tempDataProvider;
    private readonly IServiceProvider _serviceProvider;
    private readonly IActionContextAccessor _actionContextAccessor;

    public ViewRenderService(
        IRazorViewEngine viewEngine,
        ITempDataProvider tempDataProvider,
        IServiceProvider serviceProvider,
        IActionContextAccessor actionContextAccessor)
    {
        _viewEngine = viewEngine;
        _tempDataProvider = tempDataProvider;
        _serviceProvider = serviceProvider;
        _actionContextAccessor = actionContextAccessor;
    }

    public async Task<string> RenderToStringAsync(string viewName, object model = null, bool isMainPage = false)
    {
        var actionContext = _actionContextAccessor.ActionContext 
                            ?? throw new InvalidOperationException("No ActionContext available.");

        var viewResult = _viewEngine.FindView(actionContext, viewName, isMainPage);

        if (!viewResult.Success)
            throw new FileNotFoundException($"View '{viewName}' not found.");

        using var sw = new StringWriter();

        var viewDictionary = new ViewDataDictionary(new EmptyModelMetadataProvider(), new ModelStateDictionary())
        {
            Model = model
        };

        var tempData = new TempDataDictionary(actionContext.HttpContext, _tempDataProvider);

        var viewContext = new ViewContext(
            actionContext,
            viewResult.View,
            viewDictionary,
            tempData,
            sw,
            new HtmlHelperOptions()
        );

        await viewResult.View.RenderAsync(viewContext);

        return sw.ToString();
    }
}