using NUnit.Framework;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace YourProject.Tests
{
    [TestFixture]
    public class EnumerableExtensionsTests
    {
        private static Task<IEnumerable<Parameter>> AsTask(IEnumerable<Parameter> items) 
            => Task.FromResult(items);

        [Test]
        public void FirstValue_OnList_ReturnsParsedInt()
        {
            var list = new List<Parameter>
            {
                new Parameter { Value = "42" },
                new Parameter { Value = "99" }
            };

            var result = list.FirstValue<Parameter, int>(p => p.Value);

            Assert.That(result, Is.EqualTo(42));
        }

        [Test]
        public void FirstValue_OnList_WithPredicate_ReturnsFiltered()
        {
            var list = new List<Parameter>
            {
                new Parameter { Value = "42", Utility = 1 },
                new Parameter { Value = "77", Utility = 2 }
            };

            var result = list.FirstValue<Parameter, int>(p => p.Value, p => p.Utility == 2);

            Assert.That(result, Is.EqualTo(77));
        }

        [Test]
        public void FirstValue_OnEmptyList_ReturnsNull()
        {
            var list = new List<Parameter>();

            var result = list.FirstValue<Parameter, int>(p => p.Value);

            Assert.That(result, Is.Null);
        }

        [Test]
        public void FirstValue_OnList_WithNullOrWhitespaceValue_ReturnsNull()
        {
            var list = new List<Parameter>
            {
                new Parameter { Value = "   " },
                new Parameter { Value = null }
            };

            var result = list.FirstValue<Parameter, int>(p => p.Value);

            Assert.That(result, Is.Null);
        }

        [Test]
        public async Task FirstValueAsync_OnTaskEnumerable_ReturnsParsedDecimal()
        {
            var list = new List<Parameter>
            {
                new Parameter { Value = "3.14" }
            };

            var result = await AsTask(list).FirstValueAsync<Parameter, decimal>(p => p.Value);

            Assert.That(result, Is.EqualTo(3.14m));
        }

        [Test]
        public async Task FirstValueAsync_OnTaskEnumerable_WithPredicate_ReturnsFiltered()
        {
            var list = new List<Parameter>
            {
                new Parameter { Value = "1.1", Utility = 0 },
                new Parameter { Value = "2.2", Utility = 99 }
            };

            var result = await AsTask(list)
                .FirstValueAsync<Parameter, decimal>(p => p.Value, p => p.Utility == 99);

            Assert.That(result, Is.EqualTo(2.2m));
        }

        [Test]
        public async Task FirstValueAsync_OnTaskEnumerable_WhenNoMatch_ReturnsNull()
        {
            var list = new List<Parameter>
            {
                new Parameter { Value = "123", Utility = 1 }
            };

            var result = await AsTask(list)
                .FirstValueAsync<Parameter, int>(p => p.Value, p => p.Utility == 99);

            Assert.That(result, Is.Null);
        }
    }
}