using System.IO;
using System.Net.Mail;
using System.Threading;
using System.Threading.Tasks;
using Moq;
using NUnit.Framework;

[TestFixture]
public class SmtpEmailClientConfigurationTests
{
    private Mock<IConfigurationHandler<EmailSettings>> _cfg;
    private Mock<ISmtpClientGenerator> _generator;
    private Mock<ISmtpClient> _client;

    private SmtpEmailClientConfiguration _sut; // your class under test

    [SetUp]
    public void SetUp()
    {
        _cfg = new Mock<IConfigurationHandler<EmailSettings>>();
        _generator = new Mock<ISmtpClientGenerator>();
        _client = new Mock<ISmtpClient>();

        _generator.Setup(g => g.GenerateClient()).Returns(_client.Object);

        _sut = new SmtpEmailClientConfiguration(_cfg.Object, _generator.Object);
    }

    [Test]
    public async Task ConfigureAndSend_UsesPickup_DropsFileAndSendsOnce()
    {
        // Arrange
        var tempDir = Path.Combine(Path.GetTempPath(), "test-emails-" + Path.GetRandomFileName());
        _cfg.Setup(c => c.GetConfiguration()).Returns(new EmailSettings
        {
            UseLocalPickupDirectory = true,
            LocalEmailDirectory = tempDir
        });

        using var msg = new MailMessage("from@x.com", "to@x.com", "subj", "body");

        // Act
        await _sut.ConfigureAndSend(msg, environment: "Local"); // not Dev/Uat/Demo/Prod so only pickup branch

        // Assert
        Assert.That(Directory.Exists(tempDir), Is.True, "Pickup directory should be created.");
        _generator.Verify(g => g.GenerateClient(), Times.Once);
        _client.Verify(c => c.SendMailAsync(It.IsAny<MailMessage>(), It.IsAny<CancellationToken>()), Times.Once);
    }

    [Test]
    public async Task ConfigureAndSend_DevEnvironment_SendsOnce_NoPickup()
    {
        // Arrange
        _cfg.Setup(c => c.GetConfiguration()).Returns(new EmailSettings
        {
            UseLocalPickupDirectory = false
        });

        using var msg = new MailMessage("from@x.com", "dev@myCompany.com", "dev-subj", "body");

        // Act
        await _sut.ConfigureAndSend(msg, Environments.Dev);

        // Assert
        _generator.Verify(g => g.GenerateClient(), Times.Once);
        _client.Verify(c => c.SendMailAsync(msg, It.IsAny<CancellationToken>()), Times.Once);
    }

    [TestCase(Environments.Uat)]
    [TestCase(Environments.Demo)]
    public async Task ConfigureAndSend_UatOrDemo_SendsOnce_NoPickup(string env)
    {
        // Arrange
        _cfg.Setup(c => c.GetConfiguration()).Returns(new EmailSettings
        {
            UseLocalPickupDirectory = false
        });

        using var msg = new MailMessage("from@x.com", "qa@theCompany.com", "uat/demo", "body");

        // Act
        await _sut.ConfigureAndSend(msg, env);

        // Assert
        _generator.Verify(g => g.GenerateClient(), Times.Once);
        _client.Verify(c => c.SendMailAsync(msg, It.IsAny<CancellationToken>()), Times.Once);
    }

    [Test]
    public async Task ConfigureAndSend_Prod_SendsOnce_NoPickup()
    {
        // Arrange
        _cfg.Setup(c => c.GetConfiguration()).Returns(new EmailSettings
        {
            UseLocalPickupDirectory = false
        });

        using var msg = new MailMessage("from@x.com", "ops@theCompany.com", "prod", "body");

        // Act
        await _sut.ConfigureAndSend(msg, Environments.Prod);

        // Assert
        _generator.Verify(g => g.GenerateClient(), Times.Once);
        _client.Verify(c => c.SendMailAsync(msg, It.IsAny<CancellationToken>()), Times.Once);
    }

    [Test]
    public async Task ConfigureAndSend_Pickup_Then_Dev_WouldDoubleSend_IfNoEarlyReturn()
    {
        // This test documents the potential double-send.
        // If you KEEP the early return, set expectedCalls = 1.
        // If you REMOVE the early return, set expectedCalls = 2 and use environment=Dev.
        var tempDir = Path.Combine(Path.GetTempPath(), "test-emails-" + Path.GetRandomFileName());
        _cfg.Setup(c => c.GetConfiguration()).Returns(new EmailSettings
        {
            UseLocalPickupDirectory = true,
            LocalEmailDirectory = tempDir
        });

        using var msg = new MailMessage("from@x.com", "to@x.com", "subj", "body");

        await _sut.ConfigureAndSend(msg, Environments.Dev);

        // Adjust this if you *intend* the double-send behavior.
        _client.Verify(c => c.SendMailAsync(It.IsAny<MailMessage>(), It.IsAny<CancellationToken>()), Times.Once);
    }
}