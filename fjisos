using AutoMapper;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace YourApp.Infrastructure.AutoMapper;

public static class AutoMapperValidator
{
    public static void Validate(IServiceProvider services)
    {
        using var scope = services.CreateScope();
        var logger = scope.ServiceProvider
            .GetRequiredService<ILoggerFactory>()
            .CreateLogger("AutoMapperValidation");

        var cfg = scope.ServiceProvider.GetRequiredService<IConfigurationProvider>();

        try
        {
            cfg.AssertConfigurationIsValid();
            logger.LogInformation("✅ AutoMapper configuration is valid.");
        }
        catch (AutoMapperConfigurationException ex)
        {
            foreach (var typeMapError in ex.Errors)
            {
                var tm = typeMapError.TypeMap;
                logger.LogError(
                    "❌ AutoMapper error in Profile '{Profile}': {Src} -> {Dest}. Unmapped properties: {Props}",
                    tm?.Profile?.ProfileName,
                    tm?.SourceType,
                    tm?.DestinationType,
                    string.Join(", ", typeMapError.UnmappedPropertyNames ?? Array.Empty<string>())
                );
            }

            // Get profile names via the interface (explicit implementation)
            var profiles = cfg.GetAllTypeMaps()   // <-- use IConfigurationProvider
                              .Select(tm => tm.Profile?.ProfileName)
                              .Where(n => !string.IsNullOrWhiteSpace(n))
                              .Distinct();

            logger.LogError("Loaded AutoMapper profiles: {Profiles}", string.Join(", ", profiles));

            throw; // fail fast
        }
    }
}