using System.Text;
using System.Collections.Generic;
using System.Linq;

namespace Quoting.UI.Helpers
{
    public static class JsonDocHelper
    {
        public static string EscapeJson(string json)
        {
            if (string.IsNullOrEmpty(json)) return "";
            return json.Replace("\\", "\\\\")
                       .Replace("\"", "\\\"")
                       .Replace("\n", "\\n")
                       .Replace("\t", "\\t")
                       .Replace("<", "&lt;")
                       .Replace(">", "&gt;");
        }

        public static string CreateJsonBlob(IList<AmadeusDocumentType> docs)
        {
            var sb = new StringBuilder();
            sb.Append("{ \"contents\" : [");
            sb.Append(RecurseJson(docs));
            sb.Append("] }");
            return sb.ToString();
        }

        private static string RecurseJson(IList<AmadeusDocumentType> docs)
        {
            if (docs == null || docs.Count == 0) return "";

            var sb = new StringBuilder();

            foreach (var amaDoc in docs)
            {
                bool hasChildren = amaDoc.ChildAmadeusDocumentTypes != null
                                   && amaDoc.ChildAmadeusDocumentTypes.Any();

                sb.Append("{");
                sb.AppendFormat("\"breadcrumb\": \"{0}\",", amaDoc.FolderBreadcrumb);
                sb.Append("\"files\": [");

                foreach (var file in amaDoc.Documents)
                {
                    sb.Append("{");
                    sb.AppendFormat("\"id\": \"{0}\",", file.AmadeusDocumentId);
                    sb.AppendFormat("\"name\": \"{0}\",", EscapeJson(file.FileName));
                    sb.AppendFormat("\"created\": \"{0}\",", file.CreateDateString);
                    sb.AppendFormat("\"by\": \"{0}\",", file.CreatedByUserNameLessDomain);
                    sb.AppendFormat("\"notes\": \"{0}\"", EscapeJson(file.Comment));
                    sb.Append("},");
                }

                if (amaDoc.Documents.Any())
                    sb.Length--; // remove last comma

                sb.Append("]");

                if (hasChildren)
                {
                    sb.Append(", \"children\": [");
                    sb.Append(RecurseJson(amaDoc.ChildAmadeusDocumentTypes));
                    sb.Append("]");
                }

                sb.Append("},");
            }

            if (sb.Length > 0)
                sb.Length--; // remove last comma

            return sb.ToString();
        }
    }
}