public class FakeDbDataReader : DbDataReader
{
    private readonly List<Customer> _data;
    private int _currentIndex = -1;

    public FakeDbDataReader(List<Customer> data)
    {
        _data = data;
    }

    public override bool Read()
    {
        _currentIndex++;
        return _currentIndex < _data.Count;
    }

    public override Task<bool> ReadAsync(CancellationToken cancellationToken)
    {
        return Task.FromResult(Read());
    }

    public override int FieldCount => 2;

    public override string GetName(int ordinal)
    {
        if (ordinal == 0) return "Id";
        if (ordinal == 1) return "Name";
        throw new IndexOutOfRangeException();
    }

    public override int GetOrdinal(string name)
    {
        if (string.Equals(name, "Id", StringComparison.OrdinalIgnoreCase)) return 0;
        if (string.Equals(name, "Name", StringComparison.OrdinalIgnoreCase)) return 1;
        throw new IndexOutOfRangeException();
    }

    public override object GetValue(int ordinal)
    {
        var current = _data[_currentIndex];
        if (ordinal == 0) return current.Id;
        if (ordinal == 1) return current.Name;
        throw new IndexOutOfRangeException();
    }

    public override bool IsDBNull(int ordinal)
    {
        var value = GetValue(ordinal);
        return value == null || value is DBNull;
    }

    public override bool HasRows => _data.Count > 0;
    public override bool IsClosed => false;
    public override int RecordsAffected => 0;
    public override bool NextResult() => false;
    public override Task<bool> NextResultAsync(CancellationToken cancellationToken) => Task.FromResult(false);
    public override int Depth => 0;
    public override object this[int ordinal] => GetValue(ordinal);
    public override object this[string name] => GetValue(GetOrdinal(name));
    public override Type GetFieldType(int ordinal) => GetValue(ordinal).GetType();
    public override string GetDataTypeName(int ordinal) => GetFieldType(ordinal).Name;
    public override IEnumerator<object> GetEnumerator() => throw new NotImplementedException();
    public override System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
}