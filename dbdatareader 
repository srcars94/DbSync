public class FakeDbDataReader<TEntity> : DbDataReader where TEntity : new()
{
    private readonly List<TEntity> _data;
    private int _currentIndex = -1;
    private readonly PropertyInfo[] _properties;

    public FakeDbDataReader(List<TEntity> data)
    {
        _data = data;
        _properties = typeof(TEntity).GetProperties(BindingFlags.Public | BindingFlags.Instance);
    }

    public override bool Read()
    {
        _currentIndex++;
        return _currentIndex < _data.Count;
    }

    public override Task<bool> ReadAsync(CancellationToken cancellationToken)
    {
        return Task.FromResult(Read());
    }

    public override int FieldCount => _properties.Length;

    public override string GetName(int ordinal)
    {
        return _properties[ordinal].Name;
    }

    public override int GetOrdinal(string name)
    {
        for (int i = 0; i < _properties.Length; i++)
        {
            if (string.Equals(_properties[i].Name, name, StringComparison.OrdinalIgnoreCase))
                return i;
        }
        throw new IndexOutOfRangeException();
    }

    public override object GetValue(int ordinal)
    {
        var value = _properties[ordinal].GetValue(_data[_currentIndex]);
        return value ?? DBNull.Value;
    }

    public override bool IsDBNull(int ordinal)
    {
        return GetValue(ordinal) == DBNull.Value;
    }

    public override bool HasRows => _data.Count > 0;
    public override bool IsClosed => false;
    public override int RecordsAffected => 0;
    public override bool NextResult() => false;
    public override Task<bool> NextResultAsync(CancellationToken cancellationToken) => Task.FromResult(false);
    public override int Depth => 0;
    public override object this[int ordinal] => GetValue(ordinal);
    public override object this[string name] => GetValue(GetOrdinal(name));
    public override Type GetFieldType(int ordinal) => _properties[ordinal].PropertyType;
    public override string GetDataTypeName(int ordinal) => GetFieldType(ordinal).Name;
    public override IEnumerator<object> GetEnumerator() => throw new NotImplementedException();
    public override System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
}