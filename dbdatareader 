public class FakeDbDataReader : DbDataReader
{
    private readonly List<Customer> _data;
    private int _currentIndex = -1;

    public FakeDbDataReader(List<Customer> data)
    {
        _data = data;
    }

    public override bool Read()
    {
        _currentIndex++;
        return _currentIndex < _data.Count;
    }

    public override async Task<bool> ReadAsync(CancellationToken cancellationToken)
    {
        return await Task.FromResult(Read());
    }

    public override int FieldCount => 2;

    public override string GetName(int ordinal)
    {
        return ordinal switch
        {
            0 => "Id",
            1 => "Name",
            _ => throw new IndexOutOfRangeException()
        };
    }

    public override int GetOrdinal(string name)
    {
        return name.ToLower() switch
        {
            "id" => 0,
            "name" => 1,
            _ => throw new IndexOutOfRangeException()
        };
    }

    public override object GetValue(int ordinal)
    {
        var current = _data[_currentIndex];
        return ordinal switch
        {
            0 => current.Id,
            1 => current.Name,
            _ => throw new IndexOutOfRangeException()
        };
    }

    public override bool IsDBNull(int ordinal)
    {
        return GetValue(ordinal) == null || GetValue(ordinal) == DBNull.Value;
    }

    public override bool HasRows => _data.Any();
    public override bool IsClosed => false;
    public override int RecordsAffected => 0;
    public override bool NextResult() => false;
    public override Task<bool> NextResultAsync(CancellationToken cancellationToken) => Task.FromResult(false);
    public override int Depth => 0;
    public override object this[int ordinal] => GetValue(ordinal);
    public override object this[string name] => GetValue(GetOrdinal(name));

    public override Type GetFieldType(int ordinal) => GetValue(ordinal).GetType();
    public override string GetDataTypeName(int ordinal) => GetFieldType(ordinal).Name;

    public override IEnumerator<object> GetEnumerator() => throw new NotImplementedException();
    public override System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
}