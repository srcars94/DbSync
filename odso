using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using Quoting.UI.Shared.Extensions; // namespace of EnumerableExtensions

[TestFixture]
public class EnumerableExtensionsTests
{
    // ---------------- IsNullOrEmpty ----------------

    [Test]
    public void IsNullOrEmpty_ReturnsTrue_WhenEnumerableIsNull()
    {
        IEnumerable<int> values = null!;
        Assert.That(values.IsNullOrEmpty(), Is.True);
    }

    [Test]
    public void IsNullOrEmpty_ReturnsTrue_WhenEnumerableIsEmpty()
    {
        var values = Enumerable.Empty<int>();
        Assert.That(values.IsNullOrEmpty(), Is.True);
    }

    [Test]
    public void IsNullOrEmpty_ReturnsFalse_WhenEnumerableHasElements()
    {
        var values = new[] { 1 };
        Assert.That(values.IsNullOrEmpty(), Is.False);
    }

    // ---------------- BitwiseCombine ----------------

    [Test]
    public void BitwiseCombine_ReturnsZero_WhenNull()
    {
        IEnumerable<int> values = null!;
        var result = values.BitwiseCombine();
        Assert.That(result, Is.EqualTo(0));
    }

    [Test]
    public void BitwiseCombine_ReturnsZero_WhenEmpty()
    {
        var result = Enumerable.Empty<int>().BitwiseCombine();
        Assert.That(result, Is.EqualTo(0));
    }

    [Test]
    public void BitwiseCombine_CombinesValuesWithOrOperator()
    {
        var values = new[] { 1, 2, 4 };
        var result = values.BitwiseCombine();
        // 1 | 2 | 4 = 7
        Assert.That(result, Is.EqualTo(7));
    }

    [Test]
    public void BitwiseCombine_SingleValue_ReturnsThatValue()
    {
        var result = new[] { 8 }.BitwiseCombine();
        Assert.That(result, Is.EqualTo(8));
    }

    // ---------------- Next ----------------

    [Test]
    public void Next_ReturnsDefault_WhenListIsNull()
    {
        List<string> list = null!;
        var result = list.Next("A");
        Assert.That(result, Is.EqualTo(default(string)));
    }

    [Test]
    public void Next_ReturnsDefault_WhenItemNotFound()
    {
        var list = new List<string> { "A", "B", "C" };
        var result = list.Next("Z");
        Assert.That(result, Is.EqualTo(default(string)));
    }

    [Test]
    public void Next_ReturnsNextItem_WhenItemInMiddle()
    {
        var list = new List<string> { "A", "B", "C" };
        var result = list.Next("A");
        Assert.That(result, Is.EqualTo("B"));
    }

    [Test]
    public void Next_ReturnsDefault_WhenItemIsLast()
    {
        var list = new List<int> { 10, 20, 30 };
        var result = list.Next(30);
        Assert.That(result, Is.EqualTo(default(int)));
    }

    [Test]
    public void Next_WorksForReferenceTypes()
    {
        var list = new List<Foo>
        {
            new Foo { Id = 1 },
            new Foo { Id = 2 },
            new Foo { Id = 3 }
        };

        var result = list.Next(list[1]); // after Id=2
        Assert.That(result!.Id, Is.EqualTo(3));
    }

    private sealed class Foo { public int Id { get; init; } }
}