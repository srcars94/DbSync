using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Html;
using Microsoft.AspNetCore.Mvc.Rendering;
using NUnit.Framework;
using Quoting.UI.Shared.Extensions; // namespace where HtmlExtensions.cs lives

[TestFixture]
public class HtmlExtensionsTests
{
    private class TestModel
    {
        public IEnumerable<string> SelectedItems { get; set; } = Enumerable.Empty<string>();
    }

    private HtmlHelper<TestModel> CreateHtmlHelper()
    {
        // Fake IHtmlHelper instance using the default ViewContext constructor pattern
        var viewContext = new Microsoft.AspNetCore.Mvc.Rendering.ViewContext();
        var helper = new HtmlHelper<TestModel>(
            new Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.DefaultHtmlGenerator(),
            new Microsoft.AspNetCore.Mvc.ViewEngines.Internal.DefaultViewEngine(),
            new Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProvider(),
            new Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions(),
            viewContext
        );
        return helper;
    }

    [Test]
    public void CheckBoxListFor_GeneratesExpectedHtml()
    {
        // Arrange
        var model = new TestModel { SelectedItems = new[] { "2" } };

        var items = new List<SelectListItem>
        {
            new SelectListItem { Text = "Option 1", Value = "1" },
            new SelectListItem { Text = "Option 2", Value = "2", Selected = true }
        };

        var htmlHelper = new FakeHtmlHelper<TestModel>(model);

        // Act
        var html = HtmlExtensions.CheckBoxListFor(
            htmlHelper,
            m => m.SelectedItems,
            items,
            new { @class = "custom", data_test = "abc" });

        var result = html.ToString();

        // Assert
        Assert.That(result, Does.Contain("type=\"checkbox\""));
        Assert.That(result, Does.Contain("name=\"SelectedItems\""));
        Assert.That(result, Does.Contain("value=\"1\""));
        Assert.That(result, Does.Contain("value=\"2\""));
        Assert.That(result, Does.Contain("checked=\"checked\""));
        Assert.That(result, Does.Contain("class=\"custom\""));
        Assert.That(result, Does.Contain("data_test=\"abc\""));
    }

    // Simple stub to satisfy IHtmlHelper interface so we donâ€™t need full MVC context
    private class FakeHtmlHelper<T> : IHtmlHelper<T>
    {
        public FakeHtmlHelper(T model) { ViewData = new Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<T>(new Microsoft.AspNetCore.Mvc.ModelBinding.EmptyModelMetadataProvider(), new Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary()) { Model = model }; }
        public Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<T> ViewData { get; set; }
        object IHtmlHelper.ViewData => ViewData;
        public dynamic ViewBag => new System.Dynamic.ExpandoObject();
        public Microsoft.AspNetCore.Mvc.Rendering.ViewContext ViewContext => new Microsoft.AspNetCore.Mvc.Rendering.ViewContext();
        public Microsoft.AspNetCore.Mvc.Rendering.IHtmlGenerator HtmlGenerator => throw new System.NotImplementedException();
        public string IdAttributeDotReplacement => "_";
        public ITempDataDictionary TempData => new Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.TempDataDictionary();
        public UrlEncoder UrlEncoder => System.Text.Encodings.Web.HtmlEncoder.Default;
        public IHtmlContent Partial(string partialViewName, object model, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary viewData) => throw new System.NotImplementedException();
        public IHtmlContent Raw(string value) => new HtmlString(value);
        public void Contextualize(ViewContext viewContext) { }
        public string Encode(string value) => value;
        public string Encode(object value) => value?.ToString();
        public string FormatValue(object value, string format) => value?.ToString() ?? "";
        public string Value(string name, string format) => "";
        public void EndForm() { }
    }
}