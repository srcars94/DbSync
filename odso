using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using Quoting.UI.Shared.Extensions; // Namespace where your StringExtensions.cs is

[TestFixture]
public class StringExtensionsTests
{
    // ---------------- TrimStartSafe ----------------

    [Test]
    public void TrimStartSafe_ReturnsEmpty_WhenNullOrWhitespace()
    {
        Assert.That(((string)null!).TrimStartSafe(), Is.EqualTo(string.Empty));
        Assert.That("   ".TrimStartSafe(), Is.EqualTo(string.Empty));
    }

    [Test]
    public void TrimStartSafe_TrimsSpecifiedCharacters()
    {
        var result = "--Hello".TrimStartSafe('-');
        Assert.That(result, Is.EqualTo("Hello"));
    }

    [Test]
    public void TrimStartSafe_ReturnsOriginal_WhenNoTrimChars()
    {
        var result = "Hello".TrimStartSafe();
        Assert.That(result, Is.EqualTo("Hello"));
    }

    // ---------------- JoinString ----------------

    [Test]
    public void JoinString_ReturnsEmpty_WhenListIsNullOrEmpty()
    {
        IEnumerable<string> nullList = null!;
        Assert.That(nullList.JoinString(","), Is.EqualTo(string.Empty));
        Assert.That(new List<string>().JoinString(","), Is.EqualTo(string.Empty));
    }

    [Test]
    public void JoinString_JoinsValuesWithSeparator()
    {
        var list = new[] { "A", "B", "C" };
        var result = list.JoinString("-");
        Assert.That(result, Is.EqualTo("A-B-C"));
    }

    // ---------------- FormatSenseCheckValue ----------------

    public enum RvLCheckFormatType { YesNo, Bool, Currency }

    [Test]
    public void FormatSenseCheckValue_YesNo_ReturnsYesOrNo()
    {
        var resultYes = "".FormatSenseCheckValue(1M, RvLCheckFormatType.YesNo);
        var resultNo = "".FormatSenseCheckValue(0M, RvLCheckFormatType.YesNo);

        Assert.Multiple(() =>
        {
            Assert.That(resultYes, Is.EqualTo("Yes"));
            Assert.That(resultNo, Is.EqualTo("No"));
        });
    }

    [Test]
    public void FormatSenseCheckValue_Bool_ReturnsYesOrNo()
    {
        var resultYes = "".FormatSenseCheckValue(1M, RvLCheckFormatType.Bool);
        var resultNo = "".FormatSenseCheckValue(0M, RvLCheckFormatType.Bool);

        Assert.Multiple(() =>
        {
            Assert.That(resultYes, Is.EqualTo("Yes"));
            Assert.That(resultNo, Is.EqualTo("No"));
        });
    }

    [Test]
    public void FormatSenseCheckValue_OtherFormats_UsesDefaultFormatter()
    {
        var result = "".FormatSenseCheckValue(123.45M, RvLCheckFormatType.Currency);
        Assert.That(result, Does.Contain("123")); // The fallback ToString() from GetValueString
    }

    [Test]
    public void FormatSenseCheckValue_Throws_WhenFormattedValueNull()
    {
        Assert.Throws<ArgumentNullException>(() =>
            StringExtensions.FormatSenseCheckValue(null!, 1M, RvLCheckFormatType.Bool));
    }

    // ---------------- RemoveDomainFromUserName ----------------

    [Test]
    public void RemoveDomainFromUserName_RemovesUtilitiesDomain()
    {
        var result = "Sam@utilities.local".RemoveDomainFromUserName();
        Assert.That(result, Is.EqualTo("sam@.local"));
    }

    [Test]
    public void RemoveDomainFromUserName_CaseInsensitive()
    {
        var result = "TEST@UTILITIES.COM".RemoveDomainFromUserName();
        Assert.That(result, Is.EqualTo("test@.com"));
    }

    [Test]
    public void RemoveDomainFromUserName_ReturnsOriginal_WhenNoDomain()
    {
        var result = "user".RemoveDomainFromUserName();
        Assert.That(result, Is.EqualTo("user"));
    }

    // ---------------- RenderCamelCaseWithSpacesInserted ----------------

    [Test]
    public void RenderCamelCaseWithSpacesInserted_AddsSpacesBeforeUppercase()
    {
        var result = "CamelCaseString".RenderCamelCaseWithSpacesInserted();
        Assert.That(result, Is.EqualTo("Camel Case String"));
    }

    [Test]
    public void RenderCamelCaseWithSpacesInserted_ReturnsTrimmedString()
    {
        var result = "  LeadingSpace  ".RenderCamelCaseWithSpacesInserted();
        Assert.That(result, Is.EqualTo("Leading Space"));
    }

    [Test]
    public void RenderCamelCaseWithSpacesInserted_NoUppercase_ReturnsOriginal()
    {
        var result = "lowercase".RenderCamelCaseWithSpacesInserted();
        Assert.That(result, Is.EqualTo("lowercase"));
    }
}