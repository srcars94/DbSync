using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using NUnit.Framework;
using Quoting.UI.Shared.Extensions; // Namespace for LinqExtensions.cs

[TestFixture]
public class LinqExtensionsTests
{
    // ---------------- SafeAny (with predicate) ----------------

    [Test]
    public void SafeAny_WithPredicate_ReturnsFalse_WhenSourceNull()
    {
        IEnumerable<int> source = null!;
        var result = source.SafeAny(x => x > 0);
        Assert.That(result, Is.False);
    }

    [Test]
    public void SafeAny_WithPredicate_ReturnsFalse_WhenEmpty()
    {
        var source = Enumerable.Empty<int>();
        var result = source.SafeAny(x => x > 0);
        Assert.That(result, Is.False);
    }

    [Test]
    public void SafeAny_WithPredicate_ReturnsTrue_WhenMatchExists()
    {
        var source = new[] { 1, 2, 3 };
        var result = source.SafeAny(x => x > 2);
        Assert.That(result, Is.True);
    }

    // ---------------- SafeAny (no predicate) ----------------

    [Test]
    public void SafeAny_WithoutPredicate_ReturnsFalse_WhenSourceNull()
    {
        IEnumerable<int> source = null!;
        var result = source.SafeAny();
        Assert.That(result, Is.False);
    }

    [Test]
    public void SafeAny_WithoutPredicate_ReturnsTrue_WhenNotEmpty()
    {
        var source = new[] { 1 };
        var result = source.SafeAny();
        Assert.That(result, Is.True);
    }

    [Test]
    public void SafeAny_WithoutPredicate_ReturnsFalse_WhenEmpty()
    {
        var source = Enumerable.Empty<string>();
        var result = source.SafeAny();
        Assert.That(result, Is.False);
    }

    // ---------------- WhereToList (IEnumerable<T>) ----------------

    [Test]
    public async Task WhereToList_IEnumerable_ReturnsFilteredList()
    {
        var source = new[] { 1, 2, 3, 4, 5 };
        var predicates = new Func<int, bool>[]
        {
            x => x > 2,
            x => x % 2 == 1
        };

        var result = await source.WhereToList(predicates);

        Assert.That(result, Is.EqualTo(new[] { 3, 5 }));
    }

    // ---------------- WhereToList (IQueryable<T>) ----------------

    [Test]
    public async Task WhereToList_IQueryable_ReturnsFilteredList()
    {
        var source = new List<int> { 1, 2, 3, 4, 5 }.AsQueryable();
        var predicates = new System.Linq.Expressions.Expression<Func<int, bool>>[]
        {
            x => x > 2,
            x => x < 5
        };

        var result = await source.WhereToList(predicates);

        Assert.That(result, Is.EqualTo(new[] { 3, 4 }));
    }

    // ---------------- WhereToList (Task<IEnumerable<T>>) ----------------

    [Test]
    public async Task WhereToList_TaskOfIEnumerable_ReturnsFilteredList()
    {
        Task<IEnumerable<int>> task = Task.FromResult<IEnumerable<int>>(new[] { 1, 2, 3, 4 });
        var predicates = new Func<int, bool>[] { x => x > 1, x => x < 4 };

        var result = await task.WhereToList(predicates);

        Assert.That(result, Is.EqualTo(new[] { 2, 3 }));
    }

    // ---------------- WhereToList (Task<List<T>>) ----------------

    [Test]
    public async Task WhereToList_TaskOfList_ReturnsFilteredList()
    {
        Task<List<int>> task = Task.FromResult(new List<int> { 1, 2, 3, 4 });
        var predicates = new Func<int, bool>[] { x => x % 2 == 0 };

        var result = await task.WhereToList(predicates);

        Assert.That(result, Is.EqualTo(new[] { 2, 4 }));
    }

    // ---------------- WhereToList (List<T>) ----------------

    [Test]
    public void WhereToList_List_ReturnsFilteredList()
    {
        var source = new List<int> { 1, 2, 3, 4, 5 };
        var predicates = new Func<int, bool>[] { x => x > 3 };

        var result = source.WhereToList(predicates);

        Assert.That(result, Is.EqualTo(new[] { 4, 5 }));
    }

    [Test]
    public void WhereToList_List_ReturnsSameList_WhenNoPredicates()
    {
        var source = new List<int> { 1, 2, 3 };
        var result = source.WhereToList();
        Assert.That(result, Is.EqualTo(new[] { 1, 2, 3 }));
    }
}