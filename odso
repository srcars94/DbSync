using NUnit.Framework;
using Quoting.UI.Shared.Extensions; // namespace where UnitConversion.cs lives

[TestFixture]
public class UnitConversionTests
{
    // Constants from your code
    private const decimal Factor_SCMH_to_KWh = 35.31m * 1038m / 3412m;
    private const decimal Factor_KWh_to_SCMH = 3412m / (35.31m * 1038m);

    // ------------- ConvertSCMHToKwh (decimal) -------------

    [Test]
    public void ConvertSCMHToKwh_WithDecimal_ReturnsExpectedResult()
    {
        const decimal input = 10m;
        var expected = input * Factor_SCMH_to_KWh;

        var result = input.ConvertSCMHToKwh();

        Assert.That(result, Is.EqualTo(expected).Within(0.0001m));
    }

    // ------------- ConvertSCMHToKwh (nullable decimal) -------------

    [Test]
    public void ConvertSCMHToKwh_WithNullableDecimal_ReturnsExpectedResult()
    {
        decimal? input = 5m;
        var expected = input.Value * Factor_SCMH_to_KWh;

        var result = input.ConvertSCMHToKwh();

        Assert.That(result, Is.EqualTo(expected).Within(0.0001m));
    }

    [Test]
    public void ConvertSCMHToKwh_WithNullNullable_ReturnsZero()
    {
        decimal? input = null;

        var result = input.ConvertSCMHToKwh();

        Assert.That(result, Is.EqualTo(0m));
    }

    // ------------- ConvertSCMHToKwh (int) -------------

    [Test]
    public void ConvertSCMHToKwh_WithInt_ReturnsExpectedResult()
    {
        const int input = 12;
        var expected = input * Factor_SCMH_to_KWh;

        var result = input.ConvertSCMHToKwh();

        Assert.That(result, Is.EqualTo(expected).Within(0.0001m));
    }

    // ------------- ConvertKWhToSCMH (decimal) -------------

    [Test]
    public void ConvertKWhToSCMH_WithDecimal_ReturnsExpectedResult()
    {
        const decimal input = 100m;
        var expected = input * Factor_KWh_to_SCMH;

        var result = input.ConvertKWhToSCMH();

        Assert.That(result, Is.EqualTo(expected).Within(0.0001m));
    }

    // ------------- ConvertKWhToSCMH (nullable decimal) -------------

    [Test]
    public void ConvertKWhToSCMH_WithNullableDecimal_ReturnsExpectedResult()
    {
        decimal? input = 50m;
        var expected = input.Value * Factor_KWh_to_SCMH;

        var result = input.ConvertKWhToSCMH();

        Assert.That(result, Is.EqualTo(expected).Within(0.0001m));
    }

    [Test]
    public void ConvertKWhToSCMH_WithNullNullable_ReturnsZero()
    {
        decimal? input = null;

        var result = input.ConvertKWhToSCMH();

        Assert.That(result, Is.EqualTo(0m));
    }

    // ------------- ConvertKwToKwh -------------

    [Test]
    public void ConvertKwToKwh_AppliesEfficiencyFactor()
    {
        const decimal input = 100m;
        var expected = input * 0.95m;

        var result = input.ConvertKwToKwh();

        Assert.That(result, Is.EqualTo(expected));
    }

    // ------------- Integration sanity check -------------

    [Test]
    public void RoundTrip_SCMH_To_KWh_And_Back_RestoresValue_WithinTolerance()
    {
        const decimal scmh = 10m;

        var kwh = scmh.ConvertSCMHToKwh();
        var scmhBack = kwh.ConvertKWhToSCMH();

        Assert.That(scmhBack, Is.EqualTo(scmh).Within(0.0001m));
    }
}