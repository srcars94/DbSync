using System.Collections.Generic;
using System.Threading.Tasks;
using Moq;
using NUnit.Framework;
using Quoting.UI.Infrastructure.Authentication.InitialAuthentication;

namespace Quoting.UI.Infrastructure.Authentication.InitialAuthentication.Tests
{
    // Minimal interface stubs (remove if you reference the real ones)
    public interface ISecurityTokenCache
    {
        Task<Dictionary<string, string>> GetToken(string userName, string applicationName);
    }

    public interface IGetUserNameHelper
    {
        string GetUserNameFromContext();
    }

    public interface IHttpClientHeaderSetup
    {
        void AssignHeader(string key, string value);
    }

    [TestFixture]
    public class UserAuthenticationTests
    {
        private Mock<ISecurityTokenCache> _cache;
        private Mock<IGetUserNameHelper> _userHelper;
        private Mock<IHttpClientHeaderSetup> _headerSetup;

        private UserAuthentication _sut;

        [SetUp]
        public void SetUp()
        {
            _cache = new Mock<ISecurityTokenCache>(MockBehavior.Strict);
            _userHelper = new Mock<IGetUserNameHelper>(MockBehavior.Strict);
            _headerSetup = new Mock<IHttpClientHeaderSetup>(MockBehavior.Strict);

            _sut = new UserAuthentication(_cache.Object, _userHelper.Object, _headerSetup.Object);
        }

        [Test]
        public async Task GetInitialHeadersOnLoadForCaching_SetsAllReturnedHeaders()
        {
            const string username = "sam.carslake";
            const string app = "quoting";
            var headers = new Dictionary<string, string>
            {
                ["Authorization"] = "Bearer abc123",
                ["x-client-id"] = "QuotingUI"
            };

            _userHelper.Setup(h => h.GetUserNameFromContext()).Returns(username);
            _cache.Setup(c => c.GetToken(username, app)).ReturnsAsync(headers);

            _headerSetup.Setup(h => h.AssignHeader("Authorization", "Bearer abc123"));
            _headerSetup.Setup(h => h.AssignHeader("x-client-id", "QuotingUI"));

            await _sut.GetInitialHeadersOnLoadForCaching();

            _userHelper.Verify(h => h.GetUserNameFromContext(), Times.Once);
            _cache.Verify(c => c.GetToken(username, app), Times.Once);
            _headerSetup.Verify(h => h.AssignHeader("Authorization", "Bearer abc123"), Times.Once);
            _headerSetup.Verify(h => h.AssignHeader("x-client-id", "QuotingUI"), Times.Once);
            _headerSetup.VerifyNoOtherCalls();
        }

        [Test]
        public async Task GetInitialHeadersOnLoadForCaching_NoHeaders_DoesNotAssign()
        {
            const string username = "sam.carslake";
            const string app = "quoting";
            var headers = new Dictionary<string, string>(); // empty

            _userHelper.Setup(h => h.GetUserNameFromContext()).Returns(username);
            _cache.Setup(c => c.GetToken(username, app)).ReturnsAsync(headers);

            await _sut.GetInitialHeadersOnLoadForCaching();

            _userHelper.Verify(h => h.GetUserNameFromContext(), Times.Once);
            _cache.Verify(c => c.GetToken(username, app), Times.Once);
            _headerSetup.Verify(h => h.AssignHeader(It.IsAny<string>(), It.IsAny<string>()), Times.Never);
        }
    }
}