using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Moq;
using Newtonsoft.Json;
using NUnit.Framework;
using Quoting.UI.Infrastructure.Authentication.ServiceClient;

namespace Quoting.UI.Tests.Infrastructure.Authentication
{
    // If these are in another assembly, remove these stubs and import the real ones.
    public interface IFormUrlForApiClientHelper
    {
        string FormUrl<T>(ApiClientRequest<T> request);
    }

    public interface IHttpClientSetup
    {
        HttpClient Create();
    }

    [TestFixture]
    public class SecurityTokenServiceClientTests
    {
        private Mock<IFormUrlForApiClientHelper> _urlHelper = null!;
        private Mock<IHttpClientSetup> _clientSetup = null!;
        private SecurityTokenServiceClient _sut = null!;
        private TestHandler _handler = null!;

        private const string User = "sam.carslake";
        private const string App  = "quoting";
        private const string Url  = "https://fake/security/user/token?u=sam&a=quoting";

        [SetUp]
        public void SetUp()
        {
            _urlHelper = new Mock<IFormUrlForApiClientHelper>(MockBehavior.Strict);
            _clientSetup = new Mock<IHttpClientSetup>(MockBehavior.Strict);
            _handler = new TestHandler();

            // Our HttpClient will use the test handler so we can intercept the request.
            _clientSetup.Setup(x => x.Create())
                        .Returns(new HttpClient(_handler));

            _sut = new SecurityTokenServiceClient(_urlHelper.Object, _clientSetup.Object);
        }

        [Test]
        public async Task GetToken_Success_ReturnsDictionary_AndHitsUrl_FromUrlHelper()
        {
            var headers = new Dictionary<string, string>
            {
                ["Authorization"] = "Bearer abc",
                ["x-client-id"]   = "QuotingUI"
            };

            _urlHelper
                .Setup(h => h.FormUrl(It.IsAny<ApiClientRequest<Dictionary<string,string>>>()))
                .Returns(Url);

            _handler.Response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent(JsonConvert.SerializeObject(headers))
            };

            var result = await _sut.GetToken(User, App);

            // Assert
            Assert.That(result, Is.EquivalentTo(headers));
            Assert.That(_handler.LastRequest!.RequestUri!.ToString(), Is.EqualTo(Url));

            _clientSetup.Verify(s => s.Create(), Times.Once);
            _urlHelper.Verify(h => h.FormUrl(It.Is<ApiClientRequest<Dictionary<string, string>>>(r =>
                r.ApiService == ApiService.SecurityService &&
                r.HttpVerb   == HttpVerb.Get &&
                r.Controller == "User" &&
                r.Action     == "Token"
            )), Times.Once);
        }

        [Test]
        public void GetToken_WhenHttpError_Throws()
        {
            _urlHelper.Setup(h => h.FormUrl(It.IsAny<ApiClientRequest<Dictionary<string, string>>>())).Returns(Url);
            _handler.Response = new HttpResponseMessage(HttpStatusCode.InternalServerError);

            Assert.ThrowsAsync<HttpRequestException>(() => _sut.GetToken(User, App));
            _clientSetup.Verify(s => s.Create(), Times.Once);
        }

        [Test]
        public void GetToken_WhenMalformedJson_Throws()
        {
            _urlHelper.Setup(h => h.FormUrl(It.IsAny<ApiClientRequest<Dictionary<string, string>>>())).Returns(Url);
            _handler.Response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent("not json")
            };

            Assert.ThrowsAsync<JsonReaderException>(() => _sut.GetToken(User, App));
        }

        // --- helper handler to capture/return responses ---
        private sealed class TestHandler : HttpMessageHandler
        {
            public HttpRequestMessage? LastRequest { get; private set; }
            public HttpResponseMessage? Response { get; set; }

            protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken ct)
            {
                LastRequest = request;
                return Task.FromResult(Response ?? new HttpResponseMessage(HttpStatusCode.OK));
            }
        }
    }
}